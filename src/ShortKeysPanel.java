import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.*;

public class ShortKeysPanel extends JPanel {

	private final String FILE_NAME = "./Settings/shortkey.txt";
	/** Our List of Short Keys **/
	private List<Entry> shortKeys;
	
	/** Return our instance of shortKeys **/
	public List<Entry> getShortKeys(){
		return this.shortKeys;
	}

	/** Our constructor **/
	public ShortKeysPanel(){
		this.shortKeys = new ArrayList<Entry>();
		load();
		initalize();
	}
	/** 
	*	Initalize our gui
	*	Create all of our GUI Objects and set positions 
	**/
	public void initalize(){
		// null layout
		setLayout(null);
		// set our window size
		setSize(400,300);
		// our table implements our table model ShortKeyModel
		final JTable table = new JTable(new ShortKeyModel(this.shortKeys));
		// set table column size
		table.getColumnModel().getColumn(0).setPreferredWidth(20);
		// set its X and Y
		table.setBounds(0, 0,400, 200);
		// attach to a scrollPane
		JScrollPane scrollPane = new JScrollPane(table);
		// set scrollpans X and Y
		scrollPane.setBounds(0, 0, 400,200);
		// create our jbutton Save
		JButton save = new JButton("Save");
		// set JButtons X and Y
		save.setBounds(150, 215, 100,32);
		// set its actionlistener (when its clicked)
		save.addActionListener( new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(save()) // did we save correctly?
					JOptionPane.showMessageDialog(null, "Successfully Saved!");
				else  // no :(
					JOptionPane.showMessageDialog(null, "Error Saving");
			}
		});
		
		// create our insert button
		JButton insert = new JButton("Insert");
		// set inserts X and Y
		insert.setBounds(50, 215, 100,32);
		// add an actionlistener 
		insert.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// set the first keyword
				String s = (String)JOptionPane.showInputDialog(
	                    null,
	                    "Enter a short keyword:\n"
	                    + "Example:\"'a\"",
	                    "Short Keyword",
	                    JOptionPane.PLAIN_MESSAGE);
	            // set the second keyword
				String s2 = (String)JOptionPane.showInputDialog(
	                    null,
	                    "Enter a replacement:\n"
	                    + "Example:\"red:@Selling whip!\"",
	                    "Enter a replacement keyword",
	                    JOptionPane.PLAIN_MESSAGE);
	            // make some checks
				if( s.contains("/") || s.contains("::pin") || s2.contains("/") || s2.contains("::pin") || s == null || s2 == null || s.equals("") || s2.equals("")){
					return;
				}
				// add our shortkey to our list
				shortKeys.add(new Entry(s,s2));
				// ask to save, your average RSPS is 13 and doesn't understand common
				// logic like save
				int n = JOptionPane.showConfirmDialog(
					    null,
					    "Created Short Key. \n Would you like to save now?",
					    "Save now?",
					    JOptionPane.YES_NO_OPTION);
				if(n == 0) // they clicked yes... so save??
					save();
				table.updateUI(); // update our JTable
			}
		});
		// create our JButton Delete
		JButton del = new JButton("Delete");
		// set its X and Y
		del.setBounds(250,215,100,32);
		// add actionlistener
		del.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(table.getSelectedRow() >= 0){ // this check isn't really useful tbh
					int n = JOptionPane.showConfirmDialog(
					    null,
					    "Do you want to delete the row?",
					    "Delete",
					    JOptionPane.YES_NO_OPTION);
					    if(n == 0){
					    	// remove our selected jtable item
							getShortKeys().remove(table.getSelectedRow());
							// save us
							save();
						}
					}
				}	
			});
		// add all componets to Jpanel
		add(scrollPane);
		add(save);
		add(insert);
		add(del);
	}
	/** Saves our folder **/
	public boolean save(){
		// Header for our file.
		String header =  "# Rune Republic ShortKeys 1.0" + "\n"+
						 "#"  + "\n"+
						 "#"  + "\n"+
						 "# This code is auto-generated by the client when you type ::shortkey./"  + "\n"+
						 "# However, you may edit this file at your own risk."  + "\n"+
						 "# To add your own short keys follow the format below"  + "\n"+
						 "# Example:"  + "\n"+
						 "# ::adv1,::news @red@Watch my live stream at www.livestream.com/nearreality!";
		try{
			  // Create file 
			  FileWriter fstream = new FileWriter(FILE_NAME);
			  BufferedWriter out = new BufferedWriter(fstream);
			  out.write(header);
			  out.newLine();
			  // write all of our entries to our file
			  for(Entry s: this.shortKeys){
				  out.write(s.getKey()+","+s.getValue()); 
			  	  out.newLine();
			  }
			  //Close the output stream
			  out.close();
			  return true;
		}catch (Exception e){//Catch exception if any
			  System.err.println("Error: " + e.getMessage());
			  return false;
		}
	 }
		
	/** Load()
	*
	* Loads our FILE_NAME into a list, elements are created by the delimer ,
	*
	**/
	public void load(){
		try{
			Scanner s = new Scanner(new File(FILE_NAME));
			while(s.hasNextLine()){
				String line = s.nextLine();
				if(line.startsWith("#")){ // this is a comment skip
					continue;
				}
					String[] lines = line.split(",");
					this.shortKeys.add(new Entry(lines[0],lines[1])); // add our entry
		}
		System.out.println("Added "+this.shortKeys.size()+ " Short Keys!");
		} catch( Exception e ) {
			System.out.println("Error loading short keys!");
			e.printStackTrace();
		}
	}
		
}